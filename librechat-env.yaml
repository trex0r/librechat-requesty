version: 1.2.1.20250311
interface:
  cache: true
  privacyPolicy:
    externalUrl: https://requesty.ai/router
    openNewTab: true
  termsOfService:
    externalUrl: https://requesty.ai/router
    openNewTab: true
  customWelcome: "Hello there... What can i help you with?"
cache: true
registration:
  socialLogins:
    - discord
    - facebook
    - github
    - google
    - openid
  endpointsMenu: true
  modelSelect: true
  parameters: true
  sidePanel: true
  presets: true
  prompts: true
  bookmarks: true
  multiConvo: true
  agents: true
endpoints:
  custom:
    - name: Requesty
      apiKey: ${REQUESTY_KEY}
      baseURL: https://router.requesty.ai/v1
      models:
        default:
          - vertex/google/gemini-2.5-flash
          - vertex/google/gemini-2.5-pro
          - vertex/anthropic/claude-4-sonnet-latest
          - anthropic/claude-opus-4-20250514
          - novita/deepseek/deepseek-v3-0324
          - moonshot/kimi-k2-0711-preview
          - deepinfra/Qwen/Qwen3-Coder-480B-A35B-Instruct
          - alibaba/qwen3-coder-plus
          - xai/grok-4
          - deepinfra/deepseek-ai/DeepSeek-V3
          - deepinfra/Qwen/Qwen3-235B-A22B
          - novita/zai-org/glm-4.5
          - openai/chatgpt-4o-latest
          - openai/gpt-4o
          - openai/gpt-4.1
        fetch: true
      titleConvo: true
      titleModel: openai/gpt-4o-mini
      summarize: false
      summaryModel: openai/gpt-4o-mini
      modelDisplayLabel: Requesty
      iconURL: https://app.requesty.ai/_next/image?url=%2Ffavicon.ico&w=96&q=75
    - name: "OpenRouter"
      # For `apiKey` and `baseURL`, you can use environment variables that you define.
      # recommended environment variables:
      apiKey: "${OPENROUTER_KEY}" # NOT OPENROUTER_API_KEY
      baseURL: "https://openrouter.ai/api/v1"
      models:
        default: ["meta-llama/llama-3-70b-instruct"]
        fetch: true
      titleConvo: true
      titleModel: "meta-llama/llama-3-70b-instruct"
      # Recommended: Drop the stop parameter from the request as Openrouter models use a variety of stop tokens.
      dropParams: ["stop"]
      modelDisplayLabel: "OpenRouter" 
mcpServers:
  context7:
    command: npx
    args:
      - -y
      - "@upstash/context7-mcp"
  puppeteer:
    command: npx
    args:
      - -y
      - "@modelcontextprotocol/server-puppeteer"
  notionApi:
    command: npx
    args:
      - -y
      - "@notionhq/notion-mcp-server"
    env:
      OPENAPI_MCP_HEADERS: '{"Authorization":"Bearer ${NOTION_KEY}","Notion-Version":"2022-06-28"}'
  playwright:
    command: npx
    args:
      - "@playwright/mcp@latest"
  sequential-thinking:
    command: npx
    args:
      - -y
      - "@modelcontextprotocol/server-sequential-thinking"
  code-reasoning:
    command: npx
    args:
      - -y
      - "@mettamatt/code-reasoning"
  firecrawl-mcp:
    command: npx
    args:
      - -y
      - firecrawl-mcp
    env:
      FIRECRAWL_API_KEY: "${FIRECRAWL_API_KEY}"

speech:
  stt:
    openai:
      apiKey: '${STT_API_KEY}'
      model: 'whisper-1'
      
  tts:
    openai:
      apiKey: '${TTS_API_KEY}'
      model: 'tts-1'
      voices: ['alloy', 'echo', 'fable', 'onyx', 'nova', 'shimmer']
